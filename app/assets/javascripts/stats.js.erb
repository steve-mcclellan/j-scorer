// NOTE: The shared function that produces a disabled-cookies warning on
//       the signup and login pages is located in the sessions.js file.

// NOTE: The main/shared/sample stats pages are below.

$( ".stats-topic, .stats-sample_topic, .stats-shared_topic" )
    .ready( function() {

  // (check dd) > (check) > (dot) > (dot dd) > (x) > (empty) > (anything else)
  function sortSymbols( a, b ) {
    var sortOrder = ["", "✘", "• (dd)", "•", "✓", "✓ (dd)"];
    var indexA = sortOrder.indexOf( a );
    var indexB = sortOrder.indexOf( b );
    if ( indexB < indexA ) {
      return 1;
    } else if (indexB > indexA ) {
      return -1;
    } else {
      return 0;
    }
  }

  var $roundOneTable = $( "#roundOneTopicTable" );
  var $roundTwoTable = $( "#roundTwoTopicTable" );
  var $finalTable = $( "#finalTopicTable" );

  // Make the three tables on the topic-stats page sortable.
  // Initialize default sorts to [ date-played column, descending ].
  // Prevent meaningless attempts to sort by "Game" (edit) column.
  // To prevent a JS error, skip this if the table is empty.
  if ( !$roundOneTable.hasClass( "empty" ) ) {
    $roundOneTable.tablesorter({
      sortList: [[3,1]],
      sortInitialOrder: "desc",
      headers: {
        0: { sortInitialOrder: "asc" },   // Category title
        1: { sortInitialOrder: "asc" },   // Column number
        4: { sortInitialOrder: "asc" },   // Play type
        13: { sorter: false }             // Game (edit link)
      },
      textSorter: {
        5: sortSymbols,  // The clue-value columns
        6: sortSymbols,
        7: sortSymbols,
        8: sortSymbols,
        9: sortSymbols
      }
    })
  }

  if ( !$roundTwoTable.hasClass( "empty" ) ) {
    $roundTwoTable.tablesorter({
      sortList: [[3,1]],
      sortInitialOrder: "desc",
      headers: {
        0: { sortInitialOrder: "asc" },   // Category title
        1: { sortInitialOrder: "asc" },   // Column number
        4: { sortInitialOrder: "asc" },   // Play type
        13: { sorter: false }             // Game (edit link)
      },
      textSorter: {
        5: sortSymbols,  // The clue-value columns
        6: sortSymbols,
        7: sortSymbols,
        8: sortSymbols,
        9: sortSymbols
      }
    })

    if ( !$finalTable.hasClass( "empty" ) ) {
      $finalTable.tablesorter({
        sortList: [[2,1]],
        sortInitialOrder: "desc",
        headers: {
          0: { sortInitialOrder: "asc" },  // Category title
          3: { sortInitialOrder: "asc" },  // Play type
          7: { sorter: false }             // Game (edit link)
        },
        textSorter: {
          4: sortSymbols  // Result column
        }
      })
    }
  }
});


$( ".stats-show, .stats-shared, .stats-sample" ).ready( function() {

  var statsPageType;
  if ( $( this ).hasClass( "stats-show" ) ) {
    statsPageType = "stats";
  } else if ( $( this ).hasClass ( "stats-sample" ) ) {
    statsPageType = "sample";
  } else if ( $( this ).hasClass ( "stats-shared" ) ) {
    statsPageType = "shared";
  } else {
    alert ( "Invalid request" );
  }

  // Returns an array of play type abbreviations corresponding
  // to the checked boxes on the play types tab, or ['none']
  // if no boxes are checked.
  function getCheckedPlayTypeBoxes() {
    var types = $( "#typeTable :checked" ).map( function() {
      return this.id.slice(0, -4);
    }).get();

    if (types.length === 0) { return ['none']; }
    return types;
  }

  function getObjectFromSentences( dateType ) {
    var result = {};
    result.reverse = ( $( "#" + dateType + "-verb" ).val() === "hide" );
    result.preposition = $( "#" + dateType + "-preposition" ).val();
    switch (result.preposition) {
      case "sinceBeg":
        var beginDate = $( "#" + dateType + "-beginning-dropdown" ).val();
        result.beginning = ( beginDate || null );
        break;
      case "inLast":
        result.last_number = $( "#" + dateType + "-last-number" ).val();
        result.last_unit = $( "#" + dateType + "-last-unit" ).val();
        break;
      case "since":
        result.from = $( "#" + dateType + "-from input" ).val();
        break;
      case "from":
        result.from = $( "#" + dateType + "-from input" ).val();
        result.to = $( "#" + dateType + "-to input" ).val();
        break;
    }
    return result;
  }

  function makeDateFilterObject() {
    var result = {};
    var showDateObject = getObjectFromSentences( "show-date" ),
        datePlayedObject = getObjectFromSentences( "date-played" );
    for ( var key in showDateObject ) {
      result["show_date_" + key] = showDateObject[key];
    }
    for ( key in datePlayedObject ) {
      result["date_played_" + key] = datePlayedObject[key];
    }
    return result
  }

  function makeFilterObject() {
    return $.extend( makeDateFilterObject(),
                     { rerun_status: $( "#rerun-status" ).val(),
                       play_types: getCheckedPlayTypeBoxes() } );
  }

  function makeFilterQueryString() {
    return $.param( makeDateFilterObject() ) +
           "&rerun_status=" + $( "#rerun-status" ).val() +
           "&play_types=" + getCheckedPlayTypeBoxes().join( ',' );
  }

  function laterDate( date1, date2 ) {
    return date1 > date2 ? date1 : date2;
  }

  function updateFilterSentence( dateType ) {
    var preposition = $( "#" + dateType + "-preposition" ).val();
    $( "." + dateType + "-filter-object" ).hide();
    switch (preposition) {
      case "sinceBeg":
        $( "#" + dateType + "-beginning-span" ).show();
        break;
      case "inLast":
        var $options = $( "#" + dateType + "-last-unit option" ),
            num = parseFloat( $( "#" + dateType + "-last-number" ).val() );
        if ( num === 1 && $options.text().slice(-1) === "s" ) {
          $options.text( function( _, prevText ) {
            return prevText.slice(0, -1);
          });
        } else if ( num !== 1 && $options.text().slice(-1) !== "s" ) {
          $options.text( function( _, prevText ) {
            return prevText + "s";
          });
        }
        $( "#" + dateType + "-last-span" ).show();
        break;
      case "since":
        if (!storedToDates[dateType]) {
          var $toDatePicker = $( "#" + dateType + "-to-picker" );
          storedToDates[dateType] = $toDatePicker.find( "input" ).val();
          $toDatePicker.data( "DateTimePicker" ).date("9999-12-31");
        }
        $( "#" + dateType + "-from" ).show();
        break;
      case "from":
        if (storedToDates[dateType]) {
          var $toDatePicker = $( "#" + dateType + "-to-picker" ),
              fromDate = $( "#" + dateType + "-from-picker input" ).val(),
              newToDate = laterDate( fromDate, storedToDates[dateType] );
          $toDatePicker.data( "DateTimePicker" ).date( newToDate );
          storedToDates[dateType] = undefined;
        }
        $( "#" + dateType + "-from" ).show();
        $( "#" + dateType + "-to" ).show();
        break;
    }
  }

  var sortOrder = new Map( [["pa", 1]] );
  var defaultSortDirections =  {
    "pa": 1,  // "Played at", descending
    "rr": 1,  // "Rerun?", descending (check then dash)
    "sd": 1,  // "Show date", descending
    "pt": 0,  // "Play type", ascending (alphabetical)
    "cs": 1,  // "Coryat score", descending
    "ro": 1,  // "Round one", descending
    "rt": 1,  // "Round two", descending
    "dr": 1,  // "DDs right", descending
    "dw": 1,  // "DDs wrong", descending
    "fi": 1   // "Final", descending (check then X)
  };

  function sortOrderString() {
    var result = "&sort_order=";
    sortOrder.forEach(function (dir, abbr, _map) {
      result += (abbr + dir + ",");
    });
    return result.slice( 0, -1 );
  }
  var currentPage = 1;

  function gamesTableHeaderSetup() {
    $( "#played-at-col, #rerun-col, #show-date-col, #play-type-col, " +
        "#coryat-col, #round-one-col, #round-two-col, #dds-right-col, " +
        "#dds-wrong-col, #final-col" ).each( function() {
      switch ( sortOrder.get($( this ).data( "abbr" ))) {
        case 0:
          $( this ).addClass( "tablesorter-header tablesorter-headerAsc");
          break;
        case 1:
          $( this ).addClass( "tablesorter-header tablesorter-headerDesc");
          break;
        default:
          $( this ).addClass( "tablesorter-header tablesorter-headerUnSorted");
      }
    }).on( "click", function( event ) {
      var abbr = $( this ).data( "abbr" );
      if ( event.shiftKey ) {
        // Shift-click: create a compound sort.
        // If the order exists in the list, reverse its direction.
        // (This will maintain its position in the ordering.)
        // Otherwise, add it to the end with its default direction.
        if ( sortOrder.has( abbr ) ) {
          sortOrder.set( abbr, 1 - sortOrder.get( abbr ) );
        } else {
          sortOrder.set( abbr, defaultSortDirections[abbr] );
        }
      } else {
        // Standard click: replace the existing sort.
        // If the column is currently sorted, reverse its direction.
        var sortDirection;
        if ( sortOrder.has ( abbr ) ) {
          sortDirection = 1 - sortOrder.get( abbr );
        } else {
          sortDirection = defaultSortDirections[abbr];
        }
        sortOrder.clear();
        sortOrder.set( abbr, sortDirection );
      }
      makeGamesRequest();
    });
  }

  function makeGamesRequest() {
    var sharedName = "";
    var allGames = "";
    var queryString = "";
    var data = document.getElementById( "games" ).dataset;
    if ( statsPageType === "shared" ) {
      sharedName = "/" + data.name;
    } else if ( statsPageType !== "stats" && statsPageType !== "sample" ) {
      alert( "Error: malformed link" );
      return false;
    }
    if ( data.showingall === "true" ) {
      allGames = "&allgames=true";
    }
    if ( data.querystring ) {
      queryString = "&" + data.querystring;
    }
    var url = "/" + statsPageType + sharedName + "/games?page=" + currentPage
        + queryString + allGames + sortOrderString();

    $.ajax({
      url: url,
      method: "GET",
      success: function( data ) {
        $( "#games-container" ).html( data );
        pagyLinkSetup();
        gamesTableHeaderSetup();
      }
    });
  }

  function pagyLinkSetup() {
    $( ".page-link " ).on( "click", function() {
      currentPage = this.href.split( "#games_" ).slice(-1)[0];
      makeGamesRequest();
      return false;
    });
  }

  function backupLinkSetup() {
    $( "#backup-link" ).on( "click", function() {
      makeBackupRequest();
      return false;
    } );
  }

  function makeBackupRequest( backupId ) {
    $.ajax({
      url: backupId ? "/backup/" + backupId : "/backup",
      method: "GET",
      cache: false,
      timeout: 5000,  // milliseconds
      success: function ( data ) {
        if ( data.games ) {
          var timeEstimate = Math.ceil( data.games / 300 ) * 5;
          $backupSentence.html(
            "<strong>Generating backup file. This should take about " +
            timeEstimate.toString() + " seconds.</strong>"
          );
        }
        if ( data.status === "completed" ) {
          var link = document.getElementById( "invisible-download-link" );
          link.href = "/backup/" + backupId + "/download";
          link.click();
          $backupSentence.html( originalBackupSentenceHtml );
          backupLinkSetup();
        } else if ( data.status === "failed" ) {
          alert( "Oops. Something went wrong. If this persists, please " +
                 "email <%= ENV['SUPPORT_ADDRESS'] %>." );
        } else {
          window.setTimeout( makeBackupRequest, 1000, backupId || data.job_id )
        }
      },
      failure: function () {
        alert( "Oops. Something went wrong. If this persists, please " +
               "email <%= ENV['SUPPORT_ADDRESS'] %>." );
      }
    });
  }


  $( "#stats-area" ).tabs();

  var $gameTable = $( "#gameTable" ),
      $topicTable = $( "#topicTable" ),
      $typeTable = $( "#typeTable" ),
      $showDateFromPicker = $( "#show-date-from-picker" ),
      $showDateToPicker = $( "#show-date-to-picker" ),
      $datePlayedFromPicker = $( "#date-played-from-picker" ),
      $datePlayedToPicker = $( "#date-played-to-picker" ),
      storedToDates = { "show-date": undefined, "date-played": undefined },
      $sharingForm = $( "#sharing-form" ),
      $sharingSettingsError = $( "#sharing-settings-error" ),
      $sharedStatsNameField = $( "#user_shared_stats_name" ),
      $backupSentence = $( "#backup-sentence" ),
      originalBackupSentenceHtml = $backupSentence.html(),
      $restoreForm = $( "#restore-form" );


  $gameTable.stickyTableHeaders({
    scrollableArea: $( '#stats-area' )
  });

  // Sort the "Topics" table.
  // Default sort: [ topic name, ascending ].
  // Make everything else sort descending on first click.
  $topicTable.tablesorter({
    sortList: [[0,0]],
    sortInitialOrder: "desc",
    headers: {
      0: { sortInitialOrder: "asc" }
    }
  });

  $topicTable.stickyTableHeaders({
    scrollableArea: $( '#stats-area' )
  });

  // Similar for "Play types" table. Initialize default sort to
  // [ Games played, descending ]. Prevent meaningless attempts
  // to sort by checkbox column (currently in position 0).
  // To prevent a JS error, skip this if the table is empty.
  if ( !$typeTable.hasClass( "empty" ) ) {
    $typeTable.tablesorter({
      sortList: [[2,1]],
      sortInitialOrder: "desc",
      headers: {
        0: { sorter: false },
        1: { sortInitialOrder: "asc" }  // Play type (text)
      }
    });
  }

  $typeTable.stickyTableHeaders({
    scrollableArea: $( '#stats-area' )
  });

  $( "#show-all-games" ).on( "click", function() {
    $( "#some-hidden" ).hide();
    $( "#all-shown" ).show();
    document.getElementById( "games" ).dataset.showingall = "true";
    currentPage = 1;
    makeGamesRequest();
  });

  $( "#hide-untracked-games" ).on( "click", function() {
    $( "#all-shown" ).hide();
    $( "#some-hidden" ).show();
    document.getElementById( "games" ).dataset.showingall = "false";
    currentPage = 1;
    makeGamesRequest();
  });

  $( ".update-user-filters" ).on( "click", function() {
    if ( !$( this ).hasClass( "disabled" ) ) {
      $( ".update-user-filters" ).addClass( "disabled" )
                                 .html( "Updating..." );
      $.ajax({
        url: "/filters",
        method: "PATCH",
        data: makeFilterObject(),
        dataType: "json",
        success: function() { window.location.replace( "/stats" ); },
        error: function( data ) {
          console.log( "Error details:" );
          console.log( data.responseJSON );
          alert( "Oops. Something went wrong. If this persists, please " +
                 "email <%= ENV['SUPPORT_ADDRESS'] %>." );
          $( ".update-user-filters" ).removeClass( "disabled" )
                                     .html( "Update stats" );
        }
      });
    }
  });

  $( ".update-sample-filters" ).on( "click", function() {
    if ( !$( this ).hasClass( "disabled" ) ) {
      $( ".update-sample-filters" ).addClass( "disabled" )
                                   .html( "Updating..." );
      var url = "/sample?" + makeFilterQueryString();
      window.location.replace( url );
    }
  });

  $( ".update-shared-filters" ).on( "click", function () {
    if ( !$( this ).hasClass( "disabled" ) ) {
      $( ".update-shared-filters" ).addClass( "disabled" )
                                   .html( "Updating..." );
      var url = "/shared/" + $( this ).data( 'username' ) + "?" + makeFilterQueryString();
      window.location.replace( url );
    }
  });

  $( "#show-date-preposition, #show-date-last-number" ).change( function() {
    updateFilterSentence( "show-date" );
  });

  $showDateFromPicker.datetimepicker({
    format: "YYYY-MM-DD",
    minDate: "0001-01-01",
    focusOnShow: false
  });
  $showDateFromPicker.data( "DateTimePicker" ).timeZone( undefined );

  $showDateToPicker.datetimepicker({
    format: "YYYY-MM-DD",
    maxDate: "9999-12-31",
    focusOnShow: false
  });
  $showDateToPicker.data( "DateTimePicker" ).timeZone( undefined );

  $showDateFromPicker.on( "dp.change", function( e ) {
    $showDateToPicker.data( "DateTimePicker" ).minDate( e.date );
  });

  $showDateToPicker.on( "dp.change", function( e ) {
    $showDateFromPicker.data( "DateTimePicker" ).maxDate( e.date );
  });

  $( "#date-played-preposition, #date-played-last-number" ).change( function() {
    updateFilterSentence( "date-played" );
  });

  $datePlayedFromPicker.datetimepicker({
    format: "YYYY-MM-DD",
    minDate: "0001-01-01",
    focusOnShow: false
  });
  $datePlayedFromPicker.data( "DateTimePicker" ).timeZone( undefined );

  $datePlayedToPicker.datetimepicker({
    format: "YYYY-MM-DD",
    maxDate: "9999-12-31",
    focusOnShow: false
  });
  $datePlayedToPicker.data( "DateTimePicker" ).timeZone( undefined );

  $datePlayedFromPicker.on( "dp.change", function( e ) {
    $datePlayedToPicker.data( "DateTimePicker" ).minDate( e.date );
  });

  $datePlayedToPicker.on( "dp.change", function( e ) {
    $datePlayedFromPicker.data( "DateTimePicker" ).maxDate( e.date );
  });

  $sharingForm.on( "input", function() {
    $sharingSettingsError.html( "" );
    $sharedStatsNameField.removeClass( "field_with_errors" );
  });

  $sharingForm.on( "ajax:error", function( xhr, status ) {
    if ( status.status >= 400 && status.status < 500 ) {
      $sharedStatsNameField.addClass( "field_with_errors" );
    }
    if ( status.status === 0 ) {
      $sharingSettingsError.html(
        "<p>Oops! It looks like the request was not sent successfully</p>" +
        "<p>Please check your Internet connection and try again.</p>"
      );
    } else if ( status.status === 503 ) {
      $sharingSettingsError.html(
        "<p>Oops! The database is currently unavailable.</p>" +
        "<p>This usually means that a new version of the J! Scorer is in the " +
        "process of going live. This rarely lasts more than a minute or " +
        "two. Please try again shortly.</p>"
      );
    } else if ( status.status !== 409 ) {
      // 409 is handled in the update_sharing_error view.
      $sharingSettingsError.html(
        "<p>Oops! Something unexpected went wrong.</p>" +
        "<p>If this persists, please contact me at " +
        "<a href='mailto:<%= ENV['SUPPORT_ADDRESS'] %>'>" +
        "<%= ENV['SUPPORT_ADDRESS'] %></a></p>"
      )
    }
  });


  updateFilterSentence( "show-date" );
  updateFilterSentence( "date-played" );

  backupLinkSetup();

  $( "#stats-loading-message" ).remove();
  $( "#stats-area" ).show();

  makeGamesRequest();
});
