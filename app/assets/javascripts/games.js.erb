var topRowValues = <%= CURRENT_TOP_ROW_VALUES %>;

function setCookie( name, value ) {
  Cookies.set( name, value, { expires: 7305, path: '/game',
                              secure: <%= Rails.env.production? %> } );
}

function getCookie( name ) {
  // TODO: Find out why
  // return Cookies.getJSON( name );
  // stopped working properly when the database was hooked up.
  return Cookies.getJSON()[name];
}

function destroyCookie( name ) {
  Cookies.remove( name, { path: '/game', secure: <%= Rails.env.production? %> } );
}

var NEW_CATEGORY = {
  "id":null,
  "board_position":null,
  "title":"",
  "topics_string":"",
  "result1":0,
  "result2":0,
  "result3":0,
  "result4":0,
  "result5":0
};

function newCategory( position ) {
  var cat = JSON.parse( JSON.stringify( NEW_CATEGORY ) );
  cat["board_position"] = position;
  return cat;
}

var NEW_GAME_COOKIE = {
  "show_date":"",
  "date_played":"",
  "play_type":"",
  "rerun":false,
  "round_one_score":0,
  "round_two_score":0,
  "final_result":0,
  "round_one_categories":[
    newCategory( 1 ),
    newCategory( 2 ),
    newCategory( 3 ),
    newCategory( 4 ),
    newCategory( 5 ),
    newCategory( 6 )],
  "round_two_categories":[
    newCategory( 1 ),
    newCategory( 2 ),
    newCategory( 3 ),
    newCategory( 4 ),
    newCategory( 5 ),
    newCategory( 6 )],
  "final": {
    "id":null,
    "category_title":"",
    "topics_string":"",
    "result":0,
    "third_right":null,
    "second_right":null,
    "first_right":null
  }
};

function newCookie() {
  return JSON.parse( JSON.stringify( NEW_GAME_COOKIE ) );
}

var NEW_DATA_COOKIE = {
  "modified":false,
  "conflict":false,
  "activeRound":"round_one_categories"
};

function newDataCookie() {
  return JSON.parse( JSON.stringify( NEW_DATA_COOKIE ) );
}


$( ".games-game" ).ready( function() {

  function updateCookies( changed ) {
    if ( !currentGameData ) { currentGameData = newDataCookie(); }
    if ( changed === undefined ) { changed = true; }

    if ( changed ) {
      currentGameData["modified"] = true;
      enableSaveLink();
      $deleteGameLink.text( 'New game' );
    }
    setCookie( "game", currentGame );
    setCookie( "gameData", currentGameData );
  }

  function updateScoreboard() {
    currentGame.round_one_score = scores[0];
    currentGame.round_two_score = scores[1];
    setCookie( "game", currentGame );

    var totalScore = ( scores[0] * topRowValues[0] ) +
                     ( scores[1] * topRowValues[1] );
    var scoreString = Math.abs( totalScore ).toLocaleString( "en-US" );
    if ( totalScore < 0 ) {
      $scoreboard.html( "-$" + scoreString );
      $scoreboard.toggleClass( "score-positive", false );
      $scoreboard.toggleClass( "score-negative", true );
    } else {
      $scoreboard.html( "$" + scoreString );
      $scoreboard.toggleClass( "score-negative", false );
      $scoreboard.toggleClass( "score-positive", true );
    }
  }

  function updateFinalSymbol() {
    currentGame.final_result = currentGame["final"]["result"];
    setCookie( "game", currentGame );
    switch ( currentGame["final"]["result"] ) {
      case 0:
        $finalSymbol.html("");
        $buttonFJRight.removeClass( "active" );
        $buttonFJWrong.removeClass( "active" );
        break;
      case 1:
        $finalSymbol.html( "&nbsp;&#x2718;" );
        $buttonFJRight.removeClass( "active" );
        $buttonFJWrong.addClass( "active" );
        break;
      case 3:
        $finalSymbol.html( "&nbsp;&#x2713;" );
        $buttonFJRight.addClass( "active" );
        $buttonFJWrong.removeClass( "active" );
        break;
      default:
        $finalSymbol.html( "&nbsp;?" );
        $buttonFJRight.removeClass( "active" );
        $buttonFJWrong.removeClass( "active" );
        break;
    }
  }

  function showOverlay( event ) {
    vanishPoint = [ event.offsetY + event.target.offsetTop,
                    event.offsetX + event.target.offsetLeft ];

    $clue.show( "scale", { origin: vanishPoint }, 200 );
    $clue.css( "display", "flex" );

    var titleClass = "#cat-title-" + $currentClue.data( "column" ) + " p";
    var catName = $( titleClass ).html().replace( /<div>/g, " " )
                                        .replace( /<\/div>/g, '' )
                                        .replace( /<span.*?>/g, '' )
                                        .replace( /<\/span>/g, '' )
                                        .replace( /<br>/g, " " )
                                        .replace( /&nbsp;/g, " " )
                                        .trim();
    if ( escapedStringLength( catName ) > 20 ) {
      catName = escapedStringSlice( catName, 0, 15 ) + "&hellip;";
    }
    $overlayCat.html( catName );
    $overlayValue.html( "$" + clueValue);

    setOverlayData();
  }

  function setOverlayData() {
    $ddCheckbox.prop( "checked", $currentClue.data( "isdd" ) );

    $buttonRight.toggleClass( "active", $currentClue.hasClass( "clue-right" ) );
    $buttonWrong.toggleClass( "active", $currentClue.hasClass( "clue-wrong" ) );
    $buttonPass.toggleClass( "active", $currentClue.hasClass( "clue-pass" ) );
    $buttonNR.toggleClass( "active", $currentClue.hasClass( "clue-nr" ) );
  }

  function hideOverlay() {
    $clue.hide( "scale", { origin: vanishPoint }, 200 );
  }

  function setTopRowValue( round ) {
    if ( round === 1 || round === "round_one_categories" ) {
      topRowValue = topRowValues[0];
    } else if ( round === 2 || round === "round_two_categories" ) {
      topRowValue = topRowValues[1];
    } else {
      console.log( "Error: could not set top row value for round '" +
          round + "'" );
      topRowValue = 0;
    }
  }

  function setClueValue() {
    clueValue = topRowValue * $currentClue.data( "row" );
  }

  function resolveClue( html, boxstate, boxActive, statusCode, addDD ) {
    hideOverlay();
    updateScoreboard();
    $currentClue.html( "<span>" + html + "</span>" );
    var col = $currentClue.data( "column" );
    var row = $currentClue.data( "row" );
    var currentClueState = currentGame[currentRound][col - 1]["result" + row];
    setClueData( boxstate, boxActive );
    setDD( ddCheckboxState() );
    if ( addDD && ddCheckboxState() ) { statusCode += 4; }
    currentGame[currentRound][col - 1]["result" + row] = statusCode;
    updateCookies( currentClueState !== statusCode );
  }

  function setClueData( boxstate, boxActive ) {
    $currentClue.data( "boxstate", boxstate );
    $currentClue.removeClass( "clue-right clue-wrong clue-pass clue-nr" );
    switch ( boxstate ) {
      case "right":
        $currentClue.addClass( "clue-right" );
        break;
      case "wrong":
        $currentClue.addClass( "clue-wrong" );
        break;
      case "pass":
        $currentClue.addClass( "clue-pass" );
        break;
      case "nr":
        $currentClue.addClass( "clue-nr" );
        break;
    }
    $currentClue.toggleClass( "active-clue-box", boxActive );
  }

  function setDD( bool ) {
    $currentClue.toggleClass( "dd-box", bool );
    $currentClue.data( "isdd", bool );
  }

  function ddCheckboxState() {
    return $ddCheckbox.prop( "checked" );
  }

  function getScoresFromCookie() {
    scores = [0, 0];
    var rounds = [ "round_one_categories", "round_two_categories" ];
    for ( var i = 0; i < 2; i++ ) {
      var roundArray = currentGame[rounds[i]];
      setTopRowValue( i + 1 );

      for ( var cat = 0; cat < 6; cat++ ) {
        for ( var row = 1; row <= 5; row++ ) {
          switch ( roundArray[cat]["result" + row] ) {
            case 1:  // regular clue wrong - DDs don't deduct.
              scores[i] -= row;
              break;
            case 3:  // right
            case 7:  // DDright
              scores[i] += row;
              break;
            // None of the others changes the score.
          }
        }
      }
    }
    updateScoreboard();
  }

  function setCurrentRoundIndex() {
    if ( currentRound === "round_one_categories" ) {
      currentRoundIndex = 0;
    } else if ( currentRound === "round_two_categories" ) {
      currentRoundIndex = 1;
    } else {
      currentRoundIndex = 2;
    }
  }

  function populateBoard( forceFinalDisplay ) {
    var unadjustedScores = [scores[0], scores[1]];
    currentRound = currentGameData["activeRound"];
    setCurrentRoundIndex();
    if ( currentRound === "final" ) {
      populateFinal( forceFinalDisplay );
    } else {
      populateMainGameBoard( unadjustedScores );
    }

    scores = [unadjustedScores[0], unadjustedScores[1]];
    updateScoreboard();
    updateFinalSymbol();
    updateRoundLinks( currentRound );
  }

  function updateRoundLinks( currentRound ) {
    var r1link = '<a id="round-one-link" tabindex=100>Round One</a>';
    var r2link = '<a id="round-two-link" tabindex=100>Round Two</a>';
    var fjlink = '<a id="final-round-link" tabindex=100>Final Round</a>';
    switch ( currentRound ) {
      case "round_one_categories":
        $r1slot.html( "<b>Round One</b>" );
        $r2slot.html( r2link );
        $fjslot.html( fjlink );
        break;
      case "round_two_categories":
        $r1slot.html( r1link );
        $r2slot.html( "<b>Round Two</b>" );
        $fjslot.html( fjlink );
        break;
      case "final":
        $r1slot.html( r1link );
        $r2slot.html( r2link );
        $fjslot.html( "<b>Final Round</b>" );
        break;
      default:
        $r1slot.html( r1link );
        $r2slot.html( r2link );
        $fjslot.html( fjlink );
        break;
    }
    activateRoundLinks();
  }

  function populateFinal( forceFinalDisplay ) {
    var catTitleText = currentGame["final"]["category_title"];
    var $catTitleP = $( "#final-cat-title p" )
    $catTitleP.html( catTitleText );
    oldValue = catTitleText;
    $catTitleP.blur();

    $( "#final-topic-area" ).val( currentGame["final"]["topics_string"] );
    toggleContestantResults();

    // FJ display is scaled in by updateRound in the vast majority of cases.
    // This line covers the only other case: the page being populated from
    // cookies where gameData lists the activeRound as "final".
    // Scaling in doesn't seem appropriate here.
    if ( forceFinalDisplay ) { $fj.show(); }
  }

  function toggleContestantResults() {
    var d = [0,
             currentGame["final"]["first_right"],
             currentGame["final"]["second_right"],
             currentGame["final"]["third_right"]];

    for ( var i = 3; i >= 1; i-- ) {
      $( "#p" + i + "right" ).toggleClass( "active", d[i] === true );
      $( "#p" + i + "wrong" ).toggleClass( "active", d[i] === false );
      $( "#p" + i + "dnp" ).toggleClass( "active", d[i] === null );
    }
  }

  function populateMainGameBoard( unadjustedScores ) {
    setTopRowValue( currentRound );
    var roundArray = currentGame[currentRound];

    for ( var col = 1; col <= 6; col++ ) {
      var catTitleText = roundArray[col - 1]["title"];
      var $catTitleP = $( "#cat-title-" + col + " p" );
      $catTitleP.html( htmlize( catTitleText ) );
      // Applies appropriate formatting.
      oldValue = catTitleText;
      $catTitleP.blur();

      $( "#topic-area-" + col ).val( roundArray[col - 1]["topics_string"] );

      for ( var row = 1; row <= 5; row++ ) {
        $currentClue = $( "#clue-box-" + col + "-" + row );
        setClueValue();

        var boxStatus = roundArray[col - 1]["result" + row];
        scoresWithoutClue = [unadjustedScores[0], unadjustedScores[1]];

        if ( boxStatus < 0 || boxStatus > 7 ) {
          alert( "Error reading game - invalid box status" );
          scores = [-333, -333];
          $scoreboard.html( "error" );
          return false;
        }
        if ( boxStatus > 4 ) {
          $ddCheckbox.prop( "checked", true );
          boxStatus -= 4;  // Change DD status to its regular counterpart.
        } else {
          $ddCheckbox.prop( "checked", false );
        }
        triggerAppropriateClick( boxStatus );
      }
    }
  }

  function triggerAppropriateClick( boxStatus ) {
    switch ( boxStatus ) {
      case 0:  // active
        $resetLink.trigger( "click" );
        break;
      case 1:  // wrong
        $buttonWrong.trigger( "click" );
        break;
      case 2:  // pass
        $buttonPass.trigger( "click" );
        break;
      case 3:  // right
        $buttonRight.trigger( "click" );
        break;
      default:  // nr
        $buttonNR.trigger( "click" );
        break;
    }
  }

  function updateRound() {
    currentRound = currentGameData["activeRound"];
    setCurrentRoundIndex();
    setCookie( "game", currentGame );
    setCookie( "gameData", currentGameData );
    getScoresFromCookie();
    populateBoard();

    if ( currentRound === "final" ) {
      $fj.show( "scale", 200, function() {
        $board.css( 'visibility', 'hidden' );

        // Temporarily(?) removing the pre-selection of the (first) category
        // title when the round is updated, as this creates a bit of
        // unpleasantness on mobile devices with on-screen keyboards.

        // setTimeout( function() {
        //   $( "#final-cat-title" ).trigger( "click" );
        // }, 0);
      });
      $fj.css( 'display', 'flex' );

    } else {
      $fj.hide( "scale", 200 );
      $board.css( 'visibility', 'visible');

      // setTimeout( function() {
      //   $( "#cat-title-1" ).trigger( "click" );
      // }, 0);
    }
  }

  function attributize() {
    var result = JSON.parse( JSON.stringify ( currentGame ) );
    result["sixths_attributes"] = [];
    var category;
    for( var i = 0; i < 6; i++ ) {
      category = result["round_one_categories"][i];
      category["type"] = "RoundOneCategory";
      result["sixths_attributes"].push(category);
    }
    for( i = 0; i < 6; i++ ) {
      category = result["round_two_categories"][i];
      category["type"] = "RoundTwoCategory";
      result["sixths_attributes"].push(category);
    }
    result["final_attributes"] = result["final"];
    delete result.round_one_categories;
    delete result.round_two_categories;
    delete result["final"];
    return result;
  }

  // IMPORTANT: Due to precompilation of JavaScript, the app must be
  //            recompiled and redeployed to update currentOffset after
  //            a clock change due to daylight saving time.
  // TODO: Next update: 2018-11-04.
  // utc_offset gives the difference in seconds between UTC and the app's
  // default time zone (Pacific): -25200 or -28800, depending on the season.
  var currentOffset = <%= Time.zone.now.utc_offset %>;

  function showDateToCurrent() {
    // As of this writing, J!'s earliest daily airing is at 9:30am Central.
    // If it is more than half an hour before this time (i.e., before 7:00am
    // Pacific), guess that the user is playing the previous day's game.
    $showDatePicker.data( "DateTimePicker" )
                   .date( moment.utc().add( currentOffset, "seconds" )
                                      .subtract( 7, "hours" ) );
    // TODO: Set this to the previous Friday if it's a weekend.
  }

  function datePlayedToCurrent() {
    $datePlayedPicker.data( "DateTimePicker" )
                     .date( moment.utc().add( currentOffset, "seconds" ) );
  }

  function updateShowDate() {
    var modified = ( currentGame["show_date"] !== $showDateValue.val() );
    currentGame["show_date"] = $showDateValue.val();
    updateCookies( modified );
  }

  function updateDatePlayed() {
    var modified = ( currentGame["date_played"] !== $datePlayedValue.val() );
    currentGame["date_played"] = $datePlayedValue.val();
    updateCookies( modified );
  }

  function updatePlayType() {
    var modified = ( currentGame["play_type"] !== $playTypeSelect.val() );
    currentGame["play_type"] = $playTypeSelect.val();
    updateCookies( modified );
  }

  function updateRerunStatus() {
    var newValue = ( $rerunStatusSelect.val() === "true" );
    var modified = ( currentGame["rerun"] !== newValue );
    currentGame["rerun"] = newValue;
    updateCookies( modified );
  }

  function initializeFromCookie() {
    populateSaveAreaFromCookie( true );
    getScoresFromCookie();
    populateBoard( true );
  }

  function initializeNewGame( date ) {
    currentGame = newCookie();
    currentGameData = newDataCookie();
    // Initialize currentGameData before updating the date fields. That way,
    // those updates will change ["modified"] to true, enabling the user to
    // save a new game before entering any data, should they so desire.
    updateCookies();

    enableShowDate();
    if ( date ) {
      $showDatePicker.data( "DateTimePicker" ).date( date );
      updateShowDate();
    } else {
      showDateToCurrent();
    }
    datePlayedToCurrent();
    // Set the play-type dropdown to its first option.
    $playTypeSelect.prop( "selectedIndex", 0 );
    $rerunStatusSelect.prop( "selectedIndex", 0 );
    updatePlayType();
    updateRound();
  }

  function populateSaveAreaFromCookie( verificationRequired ) {
    $showDatePicker.data( "DateTimePicker" )
                   .date( currentGame.show_date );
    $datePlayedPicker.data( "DateTimePicker" )
                     .date( currentGame.date_played );
    $playTypeSelect.val( currentGame.play_type );
    $rerunStatusSelect.val( currentGame.rerun ? "true" : "false" );

    if ( !currentGameData.modified ) { disableSaveLink( "Game loaded!" ); }

    if ( currentGame["final"]["id"] ) {
      verificationRequired ? checkShowDate() : disableShowDate();
    } else {
      enableShowDate();
    }
  }

  function getShowFromDatabase( gameID ) {
    $.ajax({
      method: "GET",
      url: "/json/" + gameID,
      success: function( data ) {
        currentGame = data;
        // Grab the number of hours of offset from the time string in the data.
        var datePlayedOffset = ( currentGame.date_played.slice(-4, -3) );
        // Put date_played in display format instead of database format, so
        // it's not erroneously flagged as changed.
        currentGame.date_played = moment.utc( currentGame.date_played )
                                        .subtract( datePlayedOffset, "hours" )
                                        .format( "YYYY-MM-DD h:mma" );
        if ( currentGame.date_played.slice( 0, 4 ) === "0000"
            || currentGame.date_played.slice( 0, 1 ) === "-" ) {
          currentGame.date_played = "";
        }
        setCookie( "game", currentGame );
        currentGameData = newDataCookie();
        setCookie( "gameData", currentGameData );
        populateSaveAreaFromCookie();
        getScoresFromCookie();
        populateBoard();
      },
      error: function() {
        alert("Could not retrieve game. Please try again later.\n" +
              "If this persists, please let me know: " +
              "<%= ENV['SUPPORT_ADDRESS'] %>");
      },
      dataType: "json"
    });
  }

  // This is called from populateBoard. It also makes all of the gameboard
  // and panel links respond to presses of the space bar or enter key when
  // they have focus.
  function activateRoundLinks() {
    var $roundOneLink = $( "#round-one-link" );
    var $roundTwoLink = $( "#round-two-link" );
    var $finalRoundLink = $( "#final-round-link" );

    $roundOneLink.on( "click", function() {
      currentGameData["activeRound"] = "round_one_categories";
      updateRound();
    });

    $roundTwoLink.on( "click", function() {
      currentGameData["activeRound"] = "round_two_categories";
      updateRound();
    });

    $finalRoundLink.on( "click", function() {
      currentGameData["activeRound"] = "final";
      updateRound();
    });

    $( "#game-container a" ).on( "keydown", function( event ) {
      var code = event.which;
      // Enter is 13; space is 32.
      if ( code === 13 || code === 32 ) {
        $( this ).trigger( "click" );
      }
    });
  }

  function disableSaveLink( message ) {
    $saveLink.data( "disabled", true ).addClass( "disabled" ).html( message );
  }

  function enableSaveLink() {
    $saveLink.data( "disabled", false ).removeClass( "disabled" )
                                       .html( "Save game" );
  }

  function checkShowDate() {
    $.ajax({
      method: "GET",
      url: "/check/" + currentGame['final']['id'],
      success: function( data ) {
        // data.match will be truthy iff currentGame's final id
        // matches up with a valid game in the database belonging
        // to the currently-logged-in user.
        if ( data.match ) {
          disableShowDate();
          currentGameData["conflict"] = false;
        } else {
          enableShowDate();
          currentGameData["conflict"] = true;
          enableSaveLink();
        }
        setCookie( "gameData", currentGameData );
      },
      dataType: "json"
    });
  }

  function disableShowDate() {
    $showDateArea.toggleClass( "disabled", true );
    $showDateInput.prop( "disabled", true );
    $changeShowDateSpan.show();
  }

  function enableShowDate() {
    $showDateArea.toggleClass( "disabled", false );
    $showDateInput.prop( "disabled", false );
    $changeShowDateSpan.hide();
  }

  function disableChangeShowDateLink( message ) {
    $changeShowDateLink.data( "disabled", true )
                       .addClass( "disabled")
                       .html( message );
  }

  function enableChangeShowDateLink() {
    $changeShowDateLink.data( "disabled", false )
                       .removeClass( "disabled" )
                       .html( "change" );
  }

  function afterSaveHandler( data ) {
    updateCategoryIds( data );

    currentGameData["modified"] = false;
    setCookie( "gameData", currentGameData );
    disableSaveLink( "Saved!" );
    disableShowDate();
  }

  function saveErrorHandler( data ) {
    // If there is no connection, the following will be true:
    // * data.readyState === 0;  ( will be 4 otherwise )
    // * data.responseText === "";  ( stringified JSON otherwise )
    // * data.status === 0;  ( an HTTP status code otherwise )
    // * data.statusText === "error";  ( "OK", "Conflict", etc... )
    if ( data.readyState === 0 || data.responseText === "" ) {
      alert( "Oops! It looks like the request was not sent successfully.\n\n" +
             "Please check your Internet connection and try again." );
    } else if ( data.status === 503 ) {
      // 503: Service Unavailable is returned when the app is in
      // maintenance mode.
      alert( "Oops! The database is currently unavailable. This usually " +
             "means that a new version of the J! Scorer is in the process of " +
             "going live. This rarely lasts more than a minute or two. " +
             "Please try again shortly." );
    } else {
      var errors = JSON.parse( data.responseText );
      if ( errors["sixths.board_position"] &&
           errors["sixths.board_position"][0] === "already exists" ) {
        alert( "Cannot save due to an unexpected conflict with a category in " +
               "the database. If you're seeing this in normal use, you've " +
               "found a bug. Please let me know what you were doing that led " +
               "to this error: <%= ENV['SUPPORT_ADDRESS'] %>. Thanks!" );

      } else if ( errors["date"] &&
                  errors["date"][0] === "Invalid change" ) {
        alert( "Cannot save. The game information has been changed in an " +
               "unsupported manner. Please undo any changes and try again. " +
               "To change a saved game's show date, use the \"change\" link " +
               "above the date field." );

      } else if ( errors["date"] &&
                  errors["date"][0] === "Could not parse show date" ) {
        alert( "Cannot save. The show date could not be parsed. Please enter " +
               "a valid date in the show date field. (If you don't know the " +
               "game's show date, take your best guess. If you don't care " +
               "about sorting games or filtering/weighting stats by show " +
               "date, enter any date.)" );

      } else if ( errors["final_id"] &&
                  errors["final_id"][0] === "No match" ) {
        alert( "Cannot save. There is a conflict between the data in your " +
               "browser and the data on the server. Reloading the page " +
               "might fix this." );

      } else {
        console.log( "Unexpected error:" );
        console.dir( errors );
        console.log( 'Please note the name of the array (to the left of "' +
                     'Array[x]"), and the contents of any "quoted strings" ' +
                     "that are shown when you click on it. " +
                     '("length" and "__proto__" can be ignored.) ' +
                     "Please email <%= ENV['SUPPORT_ADDRESS'] %> with this " +
                     "information. Thanks!" );
        alert( "An unexpected error has occurred; the game cannot be saved. " +
               "If you know how, please visit the JavaScript console in your " +
               "browser, and follow the instructions there to report the " +
               "problem." );
      }
    }
    enableSaveLink();
  }

  function afterDateChangeHandler( data ) {
    var newDate = data.newDate;
    currentGame.show_date = newDate;
    $showDateValue.val( newDate );
    updateCookies( false );
    enableChangeShowDateLink();
  }

  function dateChangeErrorHandler( data ) {
    if ( data.readyState === 0 || data.responseText === "" ) {
      alert( "Oops! It looks like the request was not sent successfully.\n\n" +
             "Please check your Internet connection and try again." );
    } else if ( data.status === 503 ) {
      alert( 'Oops! The database is currently unavailable. This usually ' +
             'means that a new version of the J! Scorer is in the process of ' +
             'going live. This rarely lasts more than a minute or two. ' +
             'Please try again shortly.' );
    } else {
      switch ( JSON.parse( data.responseText ).errors[0] ) {
        case "occupied":
          alert( "Error: Another game already exists at the given date.\n\n" +
                 "Please select a different date, or move the other game " +
                 "first ( Stats -> Games -> desired game -> edit ). " );
          break;
        case "bad_date":
          alert( "Error: Could not parse the given date.\n\n" +
                 'Please enter dates in "YYYY-MM-DD" format.' );
          break;
        case "no_show":
          alert( "Error: Could not find a show at the original date.\n\n" +
                 "If you're seeing this error during normal use, you've " +
                 "found a bug. Please email me with a description of the " +
                 "situation: <%= ENV['SUPPORT_ADDRESS'] %>" );
          break;
        default:
          alert( "Unknown error.\n\n" +
                 "If you're seeing this error during normal use, you've " +
                 "found a bug. Please email me with a description of the " +
                 "situation: <%= ENV['SUPPORT_ADDRESS'] %>" );
      }
    }
    enableChangeShowDateLink();
  }

  function updateCategoryIds( dataObj ) {
    var idArray = dataObj["ids"];
    for( var i = 0; i < 6; i++ ) {
      currentGame["round_one_categories"][i]["id"] = idArray.shift();
    }
    for( i = 0; i < 6; i++ ) {
      currentGame["round_two_categories"][i]["id"] = idArray.shift();
    }
    currentGame["final"]["id"] = idArray.shift();
    setCookie( "game", currentGame );
  }


  // "scores" is of the form [roundOneScore, roundTwoScore], where each clue
  // is worth 1 to 5 points. Multiplying by the round's topRowValue will yield
  // the round's actual contribution to the Coryat score.
  var scores = [0, 0];
  var currentGame = getCookie( "game" );
  var currentGameData = getCookie( "gameData" );

  var currentRound;
  var currentRoundIndex;
  var topRowValue;
  var $currentClue;
  var clueValue;
  var scoresWithoutClue;

  var $clue = $( "#clue-over-board" );
  var vanishPoint;  // Where overlay comes from/goes to.

  var $board = $( "#board" );

  var $scoreboard = $( "#score" );
  var $finalSymbol = $( "#final-symbol" );

  var $buttonRight = $( "#button-right" );
  var $buttonPass = $( "#button-pass" );
  var $buttonWrong = $( "#button-wrong" );
  var $buttonNR = $( "#button-nr button" );
  var $ddCheckbox = $( "#dd-checkbox" );
  var $resetLink = $( "#reset-link" );
  var $cancelLink = $( "#cancel-link" );

  var $overlayCat = $( "#overlay-cat" );
  var $overlayValue = $( "#overlay-value" );

  var $fj = $( "#final-over-board" );
  var $buttonFJRight = $( "#button-final-right" );
  var $buttonFJWrong = $( "#button-final-wrong" );

  var $r1slot = $( "#r1slot" );
  var $r2slot = $( "#r2slot" );
  var $fjslot = $( "#fjslot" );

  var $changeShowDateSpan = $( "#show-date-change" );
  var $changeShowDateLink = $( "#change-show-date-link" );
  var $showDateArea = $( "#show-date-area" );
  var $showDateInput = $( "#show-date-area input" );
  var $showDatePicker = $( "#show-date-picker" );
  var $showDateValue = $( "#show-date-picker input" );

  var $datePlayedPicker = $( "#played-picker" );
  var $datePlayedValue = $( "#played-picker input" );
  var $playTypeSelect = $( "#play-type-select" );
  var $rerunStatusSelect = $( "#rerun-status-select" );
  var $saveLink = $( "#save-link" );
  var $deleteGameLink = $( "#delete-game-link" );

  var $dateChangeModal = $( "#date-change-modal" );
  var $oldShowDate = $( "#old-show-date" );
  var $changeShowDatePicker = $( "#change-show-date-picker" );
  var $changeShowDateValue = $( "#change-show-date-picker input" );
  var $changeShowDateButton = $( "#change-show-date-button" );


  $( ".clue-box" ).on( "click", function( event ) {
    $currentClue = $( this );
    var row = $currentClue.data( "row" );
    setClueValue();
    showOverlay( event );

    var multiplier;
    switch ( $currentClue.data( "boxstate" ) ) {
      case "right":
        multiplier = 1;
        break;
      case "wrong":
        multiplier = -1;
        break;
      default:
        multiplier = 0;
    }
    scoresWithoutClue = [scores[0], scores[1]];
    scoresWithoutClue[currentRoundIndex] -= ( row * multiplier );
  });

  $buttonRight.on( "click", function() {
    scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
    scores[currentRoundIndex] += $currentClue.data( "row" );
    resolveClue( "&#x2713;", "right", false, 3, true );
  });

  $buttonPass.on( "click", function() {
    scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
    resolveClue( "&#x2022;", "pass", false, 2, true );
  });

  $buttonWrong.on( "click", function() {
    if ( ddCheckboxState() ) {
      scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
      resolveClue( "&#x2022;", "pass", false, 5, false );
    } else {
      scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
      scores[currentRoundIndex] -= $currentClue.data( "row" );
      resolveClue( "&#x2718;", "wrong", false, 1, false );
    }
  });

  $buttonNR.on( "click", function() {
    scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
    $ddCheckbox.prop( "checked", false );
    resolveClue( "", "nr", false, 4, false );
  });

  $resetLink.on( "click", function() {
    scores = [scoresWithoutClue[0], scoresWithoutClue[1]];
    $ddCheckbox.prop( "checked", false );
    resolveClue( "$" + clueValue, "active", true, 0, false );
  });

  $cancelLink.on( "click", function() {
    hideOverlay();
  });


  $buttonFJRight.on( "click", function() {
    if ( currentGame["final"]["result"] === 3 ) {
      currentGame["final"]["result"] = 0;
    } else {
      currentGame["final"]["result"] = 3;
    }
    updateCookies();
    updateFinalSymbol();
  });

  $buttonFJWrong.on( "click", function() {
    if ( currentGame["final"]["result"] === 1 ) {
      currentGame["final"]["result"] = 0;
    } else {
      currentGame["final"]["result"] = 1;
    }
    updateCookies();
    updateFinalSymbol();
  });

  // Updating the status of a contestant Final response:
  $( ".contestant-result label" ).on( "click", function() {
    var $input = $( this ).find( "input" )[0];
    var originalValue = currentGame["final"][$input.name];
    var newValue = toBool( $input.value );

    currentGame["final"][$input.name] = newValue;
    updateCookies( newValue !== originalValue );
  });

  $deleteGameLink.on( "click", function() {
    if ( $( this ).text() === 'Undo' ) {
      currentGame = getCookie( "oldGame" );
      currentGameData = getCookie( "oldGameData" );
      initializeFromCookie();
      $( this ).text( 'New game' );
    } else {
      setCookie( "oldGame", currentGame );
      setCookie( "oldGameData", currentGameData );
      initializeNewGame();
      $( this ).text( 'Undo' );

      // Also clear the date from the query string, if any. This code from
      // http://atodorov.org/blog/2013/01/28/remove-query-string-with-javascript-and-html5/
      var uri = window.location.toString();
      if ( uri.indexOf( "?" ) > 0 ) {
        var clean_uri = uri.substring( 0, uri.indexOf( "?" ) );
        window.history.replaceState( {}, document.title, clean_uri );
      }
    }
  });

  $showDatePicker.on( "dp.change", function( e ) {
    updateShowDate();
  });

  $datePlayedPicker.on( "dp.change", function( e ) {
    updateDatePlayed();
  });

  $playTypeSelect.on( "change", function() {
    updatePlayType();
  });

  $rerunStatusSelect.on( "change", function() {
    updateRerunStatus();
  })

  $saveLink.on( "click", function() {
    // Take action only if the save link is not disabled.
    if ( !$saveLink.data( "disabled" ) ) {
      disableSaveLink( "Saving&hellip;" );

      // If the conflict (between cookie and database) flag was set when
      // the page was loaded, remove the category IDs from currentGame.
      if ( currentGameData["conflict"] ) {
        updateCategoryIds( { ids: [ null, null, null, null, null, null, null,
                                    null, null, null, null, null, null ] } );
      }

      $.ajax({
        method: "POST",
        url: "/save",
        data: { "game":attributize() },
        success: function( data ) { afterSaveHandler( data ); },
        error: function( data ) { saveErrorHandler( data ); },
        dataType: "json"
      });

      currentGameData["conflict"] = false;
      setCookie( "gameData", currentGameData );
    }
  });

  // The HTML uses Bootstrap to open the modal, which happens regardless
  // of the link's status. Override that behavior when the link is disabled.
  // Otherwise, plug the current show date into the modal.
  $changeShowDateLink.on( "click", function( event ) {
    if ( $changeShowDateLink.data( "disabled" ) ) {
      event.stopPropagation();
    } else {
      $oldShowDate.html( currentGame.show_date );
      $changeShowDateValue.val( '' );
    }
  });

  $changeShowDateButton.on( "click", function() {
    $dateChangeModal.modal( "hide" );
    disableChangeShowDateLink( "changing&hellip;" );

    $.ajax({
      method: "PATCH",
      url: "/redate",
      data: { "finalID": currentGame["final"]["id"],
              "oldDate": currentGame.show_date,
              "newDate": $changeShowDateValue.val() },
      success: function( data ) { afterDateChangeHandler( data ) },
      error: function( data ) { dateChangeErrorHandler( data ) },
      dataType: "json"
    });
  });

  $showDatePicker.datetimepicker({
    format: "YYYY-MM-DD",
    minDate: "0001-01-01",
    maxDate: "9999-12-31",
    focusOnShow: false
  });
  $showDatePicker.data( "DateTimePicker" ).timeZone( undefined );

  $datePlayedPicker.datetimepicker({
    format: "YYYY-MM-DD h:mma",
    minDate: "0001-01-01 00:00",
    maxDate: "9999-12-31 23:59",
    showClose: true,
    focusOnShow: false
  });
  $datePlayedPicker.data( "DateTimePicker" ).timeZone( undefined );

  $changeShowDatePicker.datetimepicker({
    format: "YYYY-MM-DD",
    minDate: "0001-01-01",
    maxDate: "9999-12-31",
    focusOnShow: false
  });
  $changeShowDatePicker.data( "DateTimePicker" ).timeZone( undefined );


  // Category title and topic entry
  var oldValue;

  $( ".cat-title, #final-cat-title" ).on( "click", function() {
    $( this ).find( "p" ).focus();
  });

  $( ".cat-title p, #final-cat-title p" ).on( "focus", function() {
    var $e = $( this );
    if ( $e.html().trim() === $e.data( "defaultvalue" ) ) {
      $e.html( "" );
    }
    oldValue = fixLineBreaks( $e.html() );
    // $e has class "click-resistant" if it is just gaining focus.
    // It does not if it is clicked while already having focus.
    if ( $e.hasClass( "click-resistant" ) ) {
      // TODO: Choose which of these is more desirable behavior.
      // placeCaretAtEnd( $e.get(0) );
      $e.selectText();
    }
    $e.toggleClass( "default-cat click-resistant", false );
  });

  $( ".cat-title p, #final-cat-title p" ).on( "blur", function() {
    var $e = $( this );
    var content;
    var title = fixLineBreaks( $e.html() );
    // Is title empty (save for possible whitespace)?
    if ( title.replace( /&nbsp;/g, "" )
              .replace( /<br>/g, "" )
              .replace( /<br \/>/g, "" )
              .replace( /&#10;/g, "" )
              .trim() === "" ) {
      $e.toggleClass( "default-cat", true );
      $e.html( $e.data( "defaultvalue" ) );
      content = "";
    } else {
      $e.toggleClass( "default-cat", false) ;
      content = title;
    }
    $e.toggleClass( "click-resistant", true);
    if ( $e.hasClass( "final-cat" ) ) {
      currentGame["final"]["category_title"] = content;
    } else {
      var cat = parseInt( $e.data( "column" ), 10 ) - 1;
      currentGame[currentRound][cat]["title"] = content;
    }
    updateCookies( content !== oldValue );
  });

  $( ".topic-area, #final-topic-area" ).on( "focus", function() {
    oldValue = $( this ).val();
  });

  $( ".topic-area" ).on( "blur", function() {
    var $e = $( this );
    var arrayPosition = $e.data( "column" ) - 1;
    currentGame[currentRound][arrayPosition]["topics_string"] = $e.val();
    updateCookies( $e.val() !== oldValue );
  });

  $( "#final-topic-area" ).on( "blur", function() {
    var newValue = $( this ).val();
    currentGame["final"]["topics_string"] = newValue;
    updateCookies( newValue !== oldValue );
  });


  // Stuff to be done on page load:

  // Populate the game:
  // 1. Load from database, if applicable, overwriting the cookie.
  // 2. Otherwise, if there's a date, initialize an empty game with that date.
  // 3. Otherwise, load from the cookie, if available.
  // 4. If none of the above applies, initialize a new, empty game.
  var givenID = $( ".data-passer" ).data( "gameid" );
  if ( $( ".data-passer" ).data( "existinggame" ) ) {
    getShowFromDatabase( givenID );
  } else if ( givenID ) {
    initializeNewGame( givenID.slice( 0, 10 ) );
    getScoresFromCookie();
    populateBoard();
  } else if ( currentGame ) {
    initializeFromCookie();
  } else {
    initializeNewGame();
    getScoresFromCookie();
    populateBoard();
  }

});
